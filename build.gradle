/*
 * SPDX-License-Identifier: Apache-2.0
 *
 * Copyright 2018-2023 Andres Almiray.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
project.rootProject.ext.theVersion = file('VERSION').text.trim()

allprojects { p ->
    p.version = p.rootProject.ext.theVersion
}

if (!project.hasProperty('reproducibleBuild')) project.ext.reproducible = 'false'
boolean reproducibleBuild = (project.rootProject.findProperty('reproducibleBuild') ?: false).toBoolean()

config {
    release = true

    info {
        name          = 'Kordamp parent'
        description   = 'Parent for Kordamp projects'
        vendor        = 'Kordamp'
        inceptionYear = '2018'
        tags          = ['kordamp', 'pom', 'build']
        bytecodeVersion = 8

        links {
            website      = "https://github.com/kordamp/${project.rootProject.name}"
            issueTracker = "https://github.com/kordamp/${project.rootProject.name}/issues"
            scm          = "https://github.com/kordamp/${project.rootProject.name}.git"
        }

        scm {
            url                 = "https://github.com/kordamp/${project.rootProject.name}"
            connection          = "scm:git:https://github.com/kordamp/${project.rootProject.name}.git"
            developerConnection = "scm:git:git@github.com:kordamp/${project.rootProject.name}.git"
        }

        specification  { enabled = false }

        implementation { enabled = false }

        people {
            person {
                id    = 'aalmiray'
                name  = 'Andres Almiray'
                url   = 'http://andresalmiray.com/'
                roles = ['developer']
                properties = [
                    twitter: 'aalmiray',
                    github : 'aalmiray'
                ]
            }
        }

        repositories {
            repository {
                name = 'localRelease'
                url  = "${project.rootProject.buildDir}/repos/local/release"
            }
            repository {
                name = 'localSnapshot'
                url  = "${project.rootProject.buildDir}/repos/local/snapshot"
            }
        }
    }

    docs {
        javadoc {
            enabled = false
        }

        groovydoc {
            replaceJavadoc = true
            options {
                link 'https://docs.gradle.org/5.0/javadoc/', 'org.gradle.'
            }
        }
    }

    buildInfo {
        useCommitTimestamp = reproducibleBuild
        skipBuildBy        = reproducibleBuild
        skipBuildJdk       = reproducibleBuild
        skipBuildOs        = reproducibleBuild
    }

    licensing {
        licenses {
            license {
                id = 'Apache-2.0'
            }
        }
    }

    publishing {
        releasesRepository  = 'localRelease'
        snapshotsRepository = 'localSnapshot'
    }
}

allprojects {
    repositories {
        mavenLocal()
        mavenCentral()
        gradlePluginPortal()
    }
}

projects.subprojects {
    dir('plugins') {
        config {
            info {
                description = project_description
            }

            plugins {
                plugin {
                    name                = project.name
                    id                  = project.pluginId
                    implementationClass = project.pluginImplementationClass
                }
            }
        }

        dependencies {
            compileOnly gradleApi()
        }

        normalization {
            runtimeClasspath {
                ignore('/META-INF/MANIFEST.MF')
            }
        }

        def scompat = project.findProperty('sourceCompatibility')
        def tcompat = project.findProperty('targetCompatibility')

        tasks.withType(JavaCompile) { JavaCompile c ->
            if (scompat) c.sourceCompatibility = scompat
            if (tcompat) c.targetCompatibility = tcompat
        }
        tasks.withType(GroovyCompile) { GroovyCompile c ->
            if (scompat) c.sourceCompatibility = scompat
            if (tcompat) c.targetCompatibility = tcompat
        }

        if (reproducibleBuild) {
            tasks.withType(AbstractArchiveTask).configureEach {
                preserveFileTimestamps = false
                reproducibleFileOrder = true
            }
        }
    }
}
